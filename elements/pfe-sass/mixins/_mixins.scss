// $boxSize = any box-sizing property, default is border-box
@mixin pfe-box-sizing($boxSize: border-box) {
  *, *::before, *::after {
    box-sizing: $boxSize;
  }
}

@mixin pfe-clearfix {
  &::after {
    clear: both;
    content: "";
    display: table;
  }
}

@mixin pfe-reset-list() {
  margin: 0;
  padding: 0;
  list-style: none;
}

@mixin pfe-reset-box() {
  margin: 0;
  padding: 0;
}

@mixin pfe-sr-only() {
  position: absolute;
  overflow: hidden;
  clip: rect(0,0,0,0);
  height: 1px;
  width: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
}

/// ===========================================================================
/// Theme Color Vars   - use with on="dark" to affect light DOM
/// ===========================================================================

@mixin pfe-theme($theme) {
  @if $theme == dark {
    --pfe-broadcasted--color--text:               #{pfe-color(surface--darkest--text)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--darkest--link)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--darkest--link--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--darkest--link--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--darkest--link--focus)};
  }
  @if $theme == darker {
    --pfe-broadcasted--color--text:               #{pfe-color(surface--darker--text)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--darker--link)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--darker--link--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--darker--link--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--darker--link--focus)};
  }
  @if $theme == darkest {
    --pfe-broadcasted--color--text:               #{pfe-color(surface--darkest--text)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--darkest--link)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--darkest--link--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--darkest--link--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--darkest--link--focus)};
  }
  @if $theme == accent {
    --pfe-broadcasted--color--text:               #{pfe-color(surface--accent--text)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--accent--link)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--accent--link--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--accent--link--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--accent--link--focus)};
  }
  @if $theme == complement {
    --pfe-broadcasted--color--text:               #{pfe-color(surface--complement--text)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--complement--link)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--complement--link--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--complement--link--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--complement--link--focus)};
  }
  @if $theme == light {
    --pfe-broadcasted--color--text:               #{pfe-color(surface--base--text)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--base--link)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--base--link--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--base--link--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--base--link--focus)};
  }
  @if $theme == lighter {
    --pfe-broadcasted--color--text:               #{pfe-color(surface--lighter--text)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--lighter--link)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--lighter--link--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--lighter--link--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--lighter--link--focus)};
  }
  @if $theme == lightest {
    --pfe-broadcasted--color--text:               #{pfe-color(surface--lightest--text)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--lightest--link)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--lightest--link--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--lightest--link--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--lightest--link--focus)};
  }
}

@mixin pfe-transition($properties...) {
  $return: null;
  @each $property in $properties {
    @if length($property) == 1 {
      $return: append($return, #{$property} 250ms $pfe-global--animation-timing, comma);
    }
    @else if length($property) == 2 {
      $return: append($return, nth($property, 1) nth($property, 2), comma);
    }
  }
  transition: $return;
}

// Make a CSS arrow
@mixin pfe-arrow($type, $color, $width: 8px, $height: 5px, $pseudo: false) {
  $direction: (
    up: 180deg,
    down: 0deg,
    right: -90deg,
    left: 90deg,
  );
  border-style: solid;
  border-width: $width $height 0;
  border-color: transparent;
  border-top-color: $color;
  transform: rotate(map-get($direction, $type));
  @if $pseudo {
    display: inline-block;
    content: "";
    @content;
  }
}

@mixin pfe-arrow-color($color) {
  border-top-color: $color;
}

@mixin pfe-print-media {
  @media print {
    @content;
  }
}

@mixin pfe-print-background {
  -webkit-print-color-adjust: exact;
  color-adjust: exact;
}
// scss-lint:disable ImportantRule
@mixin pfe-no-print-background {
  @include pfe-print-media {
    background-color: white !important;
    background-image: none !important;
    box-shadow: none !important;
  }
}
// scss-lint:enable ImportantRule

@mixin pfe-pipe( $position: right, $padding: 0, $margin: 0, $color: $border-color) {
  border: 1px solid transparent;
  border-#{$position}-color: $color;
  @if $position == right {
    padding-left: $padding;
    margin-right: $margin;
  }
  @else if $position == left {
    padding-right: $padding;
    margin-left: $margin;
  }
}

@mixin pfe-retina {
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    @content;
  }
}


/// RH Define Vars
/// Helps define the CSS Var madness, making it easier for devs!
/// @param {String} $this-component-var - Component specific variable name
/// @param {String} $this-theme-var - Theme variable name
/// @param {String} $this-fallback - Fallback color
///
/// ---------------------------------------------------------------------------
///
/// SASS fallback based on PFElements style
/// $pfe-global[--context][--state][--PropertyCamelCase]

/// Theme level Var
/// --pfe-theme[--context][--state][--PropertyCamelCase]
/// --pfe-theme--heading--hover--BackgroundColor

/// Component Var for theming specific cases
/// --pfe-[component-block][__element][--context][--state][--PropertyCamelCase]
/// --pfe-teaser__title--link-color--visited
/// --pfe-teaser__subtitle--link-color--visited

/// Defined locally for sanity
/// --pfe-local-[component-block][__element][--context][--state][--PropertyCamelCase]
/// --pfe-local-cta--link-color--inverted
///
/// ---------------------------------------------------------------------------
///
///                     ↓ component,         ↓ theme,         ↓ fallback
@mixin pfe-define-vars($this-component-var, $this-theme-var, $this-fallback) {
  --pfe-local-#{$this-component-var}: var(--pfe-#{$this-component-var}, var(--pfe-theme--#{$this-theme-var}, #{$this-fallback}));
}

// Mixin for building slot selectors
@mixin pfe-slot($slot-name, $selector: "") {
  // This logic makes it much easier to style default slots in a loop
  // with named slots
  @if $slot-name != default {
    ::slotted([slot="#{$slot-name}"]#{$selector}) {
      @content;
    }
  }
  @else {
    ::slotted(*) {
      @content;
    }
  }
}

/// ===========================================================================
/// Tab-specific SASS mixins
/// ===========================================================================
@mixin pfe-tabs-vertical {
  padding-top: #{pfe-var(container-padding)};
}

@mixin pfe-tabs-tabset {
  --pfe-tabs--BorderColor: #{pfe-color(surface--border)};
  display: flex;
  border: 0;
  border-bottom: #{pfe-var(ui--border-width)} #{pfe-var(ui--border-style)} #{pfe-local(BorderColor)};
}

@mixin pfe-tabs-tabset-vertical {
  flex-direction: column;
  width: 22.22%;
  border: 0;
  border-right: #{pfe-var(ui--border-width)} #{pfe-var(ui--border-style)} #{pfe-local(BorderColor)};
}

@mixin pfe-tabs-tabset-vertical-earth {
  padding-left: 0;
  padding-top: #{pfe-var(container-padding)};
}

@mixin pfe-tabs-panel {
  padding: 0;
}

@mixin pfe-tabs-panel-vertical {
  padding: 0;
  width: 77.78%;
  padding-right: #{pfe-var(container-padding)};
}

@mixin pfe-tab {
  --pfe-tabs--main:         transparent;
  --pfe-tabs--aux:          #{pfe-color(text--deemphasized)}; // mockup has #929292
  --pfe-tabs--link:         #{pfe-color(surface--lightest--link)};
  --pfe-tabs--focus:        #{pfe-color(surface--lightest--link--focus)};
  --pfe-tabs--highlight:    #{pfe-color(ui-tab--highlight-color)};

  position: relative;
  display: block;
  margin: 0 0 -1px;

  // Padding
  padding: calc(#{pfe-var(container-padding)} * .666) calc(#{pfe-var(container-padding)} * 1.5);
  // Border
  border: #{pfe-var(ui--border-width)} #{pfe-var(ui--border-style)} transparent;
  border-bottom: 0;
  // Inner style
  background-color: var(--pfe-tabs--main);
  color: var(--pfe-tabs--aux);
  text-transform: var(--pfe-tabs__tab--TextTransform, none); // exposing this for RH
  font-weight: #{pfe-var(font-weight--normal)};

  cursor: pointer;
  text-align: center;
}

@mixin pfe-tab-hover {
  --pfe-tabs--aux: #{pfe-color(text)};
}

@mixin pfe-tab-selected {
  --pfe-tabs--aux: $pfe-color--black;
  // Border
  border: transparent;
  border-bottom: #{pfe-var(ui--tab-highlight-width)} #{pfe-var(ui--tab-highlight-style)} var(--pfe-tabs--highlight);
}

@mixin pfe-tab-vertical {
  text-align: left;
  margin: 0 -1px 0 0;
  padding-left: calc(#{pfe-var(container-padding)} * .75);
  border: #{pfe-var(ui--border-width)} #{pfe-var(ui--border-style)} transparent;
  border-right: 0;
  position: relative;
}

@mixin pfe-tab-vertical-selected {
  border-color-top: transparent;
  border-right: #{pfe-var(ui--tab-highlight-width)} #{pfe-var(ui--tab-highlight-style)} var(--pfe-tabs--highlight);
}

@mixin pfe-tab-earth-selected-false {
  border-left: #{pfe-var(ui--border-width)} #{pfe-var(ui--border-style)} #{pfe-color(surface--border)};
  border-bottom: #{pfe-var(ui--border-width)} #{pfe-var(ui--border-style)} #{pfe-color(surface--border)};
  border-top: #{pfe-var(ui--tab-highlight-width)} #{pfe-var(ui--tab-highlight-style)} #{pfe-color(surface--lighter)};
  --pfe-tabs--main: #{pfe-color(surface--lighter)};
}

@mixin pfe-tab-earth-vertical {
  border-top: #{pfe-var(ui--border-width)} #{pfe-var(ui--border-style)} #{pfe-color(surface--border)};
}

@mixin pfe-tab-earth-vertical-selected {
  border-top: #{pfe-var(ui--border-width)} #{pfe-var(ui--border-style)} #{pfe-color(surface--border)};
  border-right: 0;
  border-left: #{pfe-var(ui--tab-highlight-width)} #{pfe-var(ui--tab-highlight-style)} var(--pfe-tabs--highlight);
}

@mixin pfe-tab-earth-vertical-selected-false {
    border-right: #{pfe-var(ui--border-width)} #{pfe-var(ui--border-style)} #{pfe-color(surface--border)};
    border-bottom: 0;
    border-left: #{pfe-var(ui--tab-highlight-width)} #{pfe-var(ui--tab-highlight-style)} #{pfe-color(surface--lighter)};
}

@mixin pfe-tab-earth-selected {
    --pfe-tabs--main: #{pfe-color(surface--lightest)};
    border-top: #{pfe-var(ui--tab-highlight-width)} #{pfe-var(ui--tab-highlight-style)} var(--pfe-tabs--highlight);
    border-bottom: 0;
    border-left: #{pfe-var(ui--border-width)} #{pfe-var(ui--border-style)} #{pfe-color(surface--border)};
}

@mixin pfe-tab-earth-selected-last {
    border-right: #{pfe-var(ui--border-width)} #{pfe-var(ui--border-style)} #{pfe-color(surface--border)};
}

@mixin pfe-tab-earth-vertical-selected-last {
    border-bottom: #{pfe-var(ui--border-width)} #{pfe-var(ui--border-style)} #{pfe-color(surface--border)};
}

@mixin pfe-tab-earth-vertical-first {
    border-top: 0;
}

@mixin pfe-tab-wind-dark-selected {
    --pfe-tabs--aux: #{pfe-color(ui-tab--dark-hover-color)};
}

@mixin pfe-tab-panel-container {
    border: #{pfe-var(ui--border-width)} #{pfe-var(ui--border-style)} #{pfe-color(surface--border)};
    border-top: none;
    padding: #{pfe-var(container-spacer)};
    padding: calc(#{pfe-var(container-spacer)} * 2);
}

@mixin pfe-tab-panel-container-vertical {
    border: #{pfe-var(ui--border-width)} #{pfe-var(ui--border-style)}  #{pfe-color(surface--border)};
    border-left: none;
}