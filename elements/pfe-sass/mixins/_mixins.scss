// $boxSize = any box-sizing property, default is border-box
@mixin pfe-box-sizing($boxSize: border-box) {
  *, *::before, *::after {
    box-sizing: $boxSize;
  }
}

@mixin pfe-clearfix {
  &::after {
    clear: both;
    content: "";
    display: table;
  }
}

@mixin pfe-reset-list() {
  margin: 0;
  padding: 0;
  list-style: none;
}

@mixin pfe-reset-box() {
  margin: 0;
  padding: 0;
}

@mixin pfe-sr-only() {
  position: absolute;
  overflow: hidden;
  clip: rect(0,0,0,0);
  height: 1px;
  width: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
}

/// ===========================================================================
/// Theme Color Vars   - use with on="dark" to affect light DOM
/// ===========================================================================

@mixin pfe-theme($theme) {
  @if $theme == dark {
    --pfe-broadcasted--color--text:               #{pfe-color(text--on-dark)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(link--on-dark)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(link--visited--on-dark)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(link--hover--on-dark)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(link--focus--on-dark)};
  }
  @if $theme == light {
    --pfe-broadcasted--color--text:               #{pfe-color(text)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(link)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(link--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(link--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(link--focus)};
  }
  // THEMES:
  @if $theme == darker {
    --pfe-broadcasted--color--text:               #{pfe-color(surface--darker--text)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--darker--link)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--darker--link--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--darker--link--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--darker--link--focus)};
  }
  @if $theme == darkest {
    --pfe-broadcasted--color--text:               #{pfe-color(surface--darkest--text)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--darkest--link)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--darkest--link--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--darkest--link--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--darkest--link--focus)};
  }
  @if $theme == accent {
    --pfe-broadcasted--color--text:               #{pfe-color(surface--accent--text)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--accent--link)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--accent--link--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--accent--link--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--accent--link--focus)};
  }
  @if $theme == complement {
    --pfe-broadcasted--color--text:               #{pfe-color(surface--complement--text)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--complement--link)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--complement--link--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--complement--link--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--complement--link--focus)};
  }

  @if $theme == lighter {
    --pfe-broadcasted--color--text:               #{pfe-color(surface--lighter--text)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--lighter--link)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--lighter--link--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--lighter--link--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--lighter--link--focus)};
  }
  @if $theme == lightest {
    --pfe-broadcasted--color--text:               #{pfe-color(surface--lightest--text)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--lightest--link)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--lightest--link--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--lightest--link--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--lightest--link--focus)};
  }
}

@mixin pfe-transition($properties...) {
  $return: null;
  @each $property in $properties {
    @if length($property) == 1 {
      $return: append($return, #{$property} 250ms $pfe-global--animation-timing, comma);
    }
    @else if length($property) == 2 {
      $return: append($return, nth($property, 1) nth($property, 2), comma);
    }
  }
  transition: $return;
}

// Make a CSS arrow
@mixin pfe-arrow($type, $color, $width: 8px, $height: 5px, $pseudo: false) {
  $direction: (
    up: 180deg,
    down: 0deg,
    right: -90deg,
    left: 90deg,
  );
  border-style: #{pfe-var(surface--border-style)};
  border-width: $width $height 0;
  border-color: transparent;
  border-top-color: $color;
  transform: rotate(map-get($direction, $type));
  @if $pseudo {
    display: inline-block;
    content: "";
    @content;
  }
}

@mixin pfe-arrow-color($color) {
  border-top-color: $color;
}

@mixin pfe-print-media {
  @media print {
    @content;
  }
}

@mixin pfe-print-background {
  -webkit-print-color-adjust: exact;
  color-adjust: exact;
}
// scss-lint:disable ImportantRule
@mixin pfe-no-print-background {
  @include pfe-print-media {
    background-color: white !important;
    background-image: none !important;
    box-shadow: none !important;
  }
}
// scss-lint:enable ImportantRule

@mixin pfe-pipe( $position: right, $padding: 0, $margin: 0, $color: $border-color) {
  border: #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} transparent;
  border-#{$position}-color: $color;
  @if $position == right {
    padding-left: $padding;
    margin-right: $margin;
  }
  @else if $position == left {
    padding-right: $padding;
    margin-left: $margin;
  }
}

@mixin pfe-retina {
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    @content;
  }
}

// Mixin for building slot selectors
@mixin pfe-slot($slot-name, $selector: "") {
  // This logic makes it much easier to style default slots in a loop
  // with named slots
  @if $slot-name != default {
    ::slotted([slot="#{$slot-name}"]#{$selector}) {
      @content;
    }
  }
  @else {
    ::slotted(*) {
      @content;
    }
  }
}

/// ===========================================================================
/// Accordion Specific SASS Vars
/// ===========================================================================

$pfe-expand_button--LineHeight:      1.5;
$pfe-expand_button--Padding:         #{pfe-var(container-spacer)};
$pfe-expand_button--Padding--factor: .75;
$pfe-expand_button--Padding--wide:   #{$pfe-expand_button--Padding * 1.5};

$pfe-expand_chevron--size:           .4em;
$pfe-expand_chevron--weight:         .1em;
$pfe-expand_chevron--placement:      #{$pfe-expand_button--LineHeight / 2 - $pfe-expand_chevron--size / 2};

@mixin pfe-accordion-header {
  display: block;
  > * {
    margin: 0;
  }
}

@mixin pfe-trigger-button($component-name, $theme: light, $align: left) {
    --pfe-#{$component-name}--main:             transparent;
    --pfe-#{$component-name}--aux:              #{pfe-color(surface--lightest--text)};
    --pfe-#{$component-name}--focus:            #{pfe-color(surface--lightest--link)};
    --pfe-#{$component-name}--border-left:      #{pfe-var(surface--border-width-heavy)} #{pfe-var(surface--border-style)} transparent;
    --pfe-#{$component-name}--border-right:     #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} transparent;
    --pfe-#{$component-name}--border-bottom:    0;

    -webkit-appearance: button;
    margin: 0;
    width: 100%;
    height: auto;
    font-family: inherit;
    font-weight: 700;
    text-align: left;
    cursor: pointer;
    z-index: 1;
    position: relative;
    font-size:   calc(#{pfe-var(font-size)} * 1.1);
    line-height: #{pfe-var(line-height)};
    color:            var(--pfe-#{$component-name}--aux);
    background-color: var(--pfe-#{$component-name}--main);
    border-left:      var(--pfe-#{$component-name}--border-left);
    border-right:     var(--pfe-#{$component-name}--border-right);
    border-bottom:    var(--pfe-#{$component-name}--border-bottom);
    border-top: 0;

    &:hover {
        outline: none;
        border-left-color:  var(--pfe-#{$component-name}--focus);
        z-index: 2;
    }

    &:focus {
        outline: none;
        z-index: 2;
        text-decoration: underline;
        text-decoration-color: pfe-color(surface--border--darker);
    }

    &::-moz-focus-inner {
        border: 0;
    }
    @if $align == right {
        padding: #{$pfe-expand_button--Padding} $pfe-expand_button--Padding--wide #{$pfe-expand_button--Padding} 50px;
    } @else {
        padding: #{$pfe-expand_button--Padding} 50px #{$pfe-expand_button--Padding} $pfe-expand_button--Padding--wide;
    }
    // @TODO later, type scale support
    //[scale="large"] & {
    //    font-size: calc((#{pfe-var(font-size)} * 1.3));
    //}
}

@mixin pfe-trigger-button-last($theme: light) {
  border-bottom: #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} #{pfe-color(surface--border--lightest)};
  // @TODO Support differences based on theme
  // @if $theme == dark {
  //     border-bottom: #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} #{pfe-color(surface--border--lightest)};
  // }
  // @else {
  //     border-bottom: #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} #{pfe-color(surface--border--lightest)};
  // }
}

@mixin pfe-trigger-button-first($theme: light) {
  border-top: #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} #{pfe-color(surface--border--lightest)};
  // @TODO Support differences based on theme
  // @if $theme == dark {
  //     border-top: #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} #{pfe-color(surface--border--lightest)};
  // }
  // @else {
  //     border-top: #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} #{pfe-color(surface--border--lightest)};
  // }
}

@mixin pfe-trigger-expanded {
    position: relative;
    display: block;
    border-bottom: 0;
}

@mixin pfe-trigger-color($component-name, $theme: light) {
  @if $theme == dark {
    --pfe-#{$component-name}--main:         transparent;
    --pfe-#{$component-name}--aux:          #{pfe-color(surface--darkest--text)};
    --pfe-#{$component-name}--focus:        #{pfe-color(surface--lightest)};
  }
  @else {
    --pfe-#{$component-name}--main:         transparent;
    --pfe-#{$component-name}--aux:          #{pfe-color(surface--lightest--text)};
    --pfe-#{$component-name}--focus:        #{pfe-color(surface--lightest--link)};
    --pfe-#{$component-name}--border-bottom: #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} #{pfe-color(surface--border--lightest)};
  }
}

@mixin pfe-trigger-color-expanded($component-name, $theme: light) {
  @if $theme == dark {
    --pfe-#{$component-name}--main:         #{pfe-color(surface--darker)};
    --pfe-#{$component-name}--aux:          #{pfe-color(surface--darkest--text)};
    --pfe-#{$component-name}--focus:        #{pfe-color(surface--lightest)};
    --pfe-#{$component-name}--border-left:  #{pfe-var(surface--border-width-heavy)} #{pfe-var(surface--border-style)} #{pfe-color(surface--border-darkest)};
    --pfe-#{$component-name}--border-right: #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} #{pfe-color(surface--border-darkest)};
  }
  @else {
    --pfe-#{$component-name}--main:              #{pfe-color(surface--lightest)};
    --pfe-#{$component-name}--aux:               #{pfe-color(surface--lightest--text)};
    --pfe-#{$component-name}--focus:             #{pfe-color(surface--lightest--link)};
    --pfe-#{$component-name}--border-left:       #{pfe-var(surface--border-width-heavy)} #{pfe-var(surface--border-style)} #{pfe-color(surface--lightest--link)};
    --pfe-#{$component-name}--border-right:      #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} #{pfe-color(surface--border--lightest)};
  }
}

/// ===========================================================================
/// Accordion chevrons
/// ===========================================================================

@mixin pfe-chevron-expanded($state: true, $position: after) {
  content: "";
  position: absolute;
  top: calc((#{pfe-var(container-spacer)} * #{$pfe-expand_button--Padding--factor}) + #{$pfe-expand_chevron--placement} );
  display: block;
  border-style: #{pfe-var(surface--border-style)};
  height: $pfe-expand_chevron--size;
  width: $pfe-expand_chevron--size;
  text-align: center;
  transition: transform 0.15s;
  @if $state {
    border-width: #{$pfe-expand_chevron--weight} #{$pfe-expand_chevron--weight} 0 0;
    border-bottom: 0;
    transform: rotate(-45deg);
    @if $position == before {
      left: #{$pfe-expand_button--Padding--wide};
    }
    @else {
      right: #{$pfe-expand_button--Padding--wide};
    }
  }
  @else {
    border-width: 0 #{$pfe-expand_chevron--weight} #{$pfe-expand_chevron--weight} 0;
    transform: rotate(45deg);
    @if $position == before {
      left: #{$pfe-expand_button--Padding--wide};
    }
    @else {
      right: #{$pfe-expand_button--Padding--wide};
    }
  }
}

/// ===========================================================================
/// Accordion panel
/// ===========================================================================

@mixin pfe-container {
  position: relative;
  display: block;
  width: 100%;

  padding: calc(#{pfe-local(Padding--vertical)} / 2)  #{pfe-local(Padding--horizontal)};

  @media (min-width: #{pfe-breakpoint(sm)}) {
     padding: #{pfe-local(Padding)};
  }
}

@mixin pfe-accordion-panel {
  display: none;
  overflow: hidden;
  will-change: height;
  border-color: transparent;
}

@mixin pfe-accordion-panel-expanded {
  display: block;
  position: relative;
}

@mixin pfe-accordion-panel-expanded-style($theme: light) {
  border-right: #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} transparent;
  border-left: #{pfe-var(surface--border-width--heavy)} #{pfe-var(surface--border-style)} transparent;
  @if $theme == dark {
    box-shadow: none;
    background-color: #{pfe-color(surface--darker)};
    border-left-color: #{pfe-color(surface--darkest--text)};
    border-right-color: #{pfe-color(surface--darkest--text)};
  }
  @else {
    box-shadow: 0 5px #{pfe-var(surface--border-width--heavy)} rgba(140, 140, 140, 0.35);
    border-left-color: #{pfe-color(surface--lightest--link)};
    background-color: #{pfe-color(surface--lightest)};
    border-right-color: #{pfe-color(surface--border--lightest)};
    border-bottom: #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} #{pfe-color(surface--border--lightest)};
  }
}

@mixin pfe-accordion-panel-container-inset($align: left)  {
  box-sizing: border-box;
  width: 100%;

  @if $align == left {
    padding: 0 #{$pfe-expand_chevron--padding} #{$pfe-expand_button--padding} #{$pfe-expand_button--padding-wide};
  }
  @else {
    padding: 0 #{$pfe-expand_button--padding-wide} #{$pfe-expand_button--padding} #{$pfe-expand_chevron--padding};
  }
}
